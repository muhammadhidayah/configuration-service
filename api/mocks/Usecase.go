// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import configuration "github.com/muhammadhidayah/configuration-service/proto/configuration"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddConfigurationClient provides a mock function with given fields: _a0, _a1
func (_m *Usecase) AddConfigurationClient(_a0 context.Context, _a1 *configuration.ConfigurationClient) (*configuration.ResponseConfigClient, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigClient
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationClient) *configuration.ResponseConfigClient); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationClient) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddConfigurationGlobal provides a mock function with given fields: _a0, _a1
func (_m *Usecase) AddConfigurationGlobal(_a0 context.Context, _a1 *configuration.ConfigurationGlobal) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationGlobal) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationGlobal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguration provides a mock function with given fields: _a0, _a1
func (_m *Usecase) DeleteConfiguration(_a0 context.Context, _a1 int32) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context, int32) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationClientBySubs provides a mock function with given fields: _a0, _a1
func (_m *Usecase) DeleteConfigurationClientBySubs(_a0 context.Context, _a1 *configuration.ConfigurationClient) (*configuration.ResponseConfigClient, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigClient
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationClient) *configuration.ResponseConfigClient); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationClient) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationClient provides a mock function with given fields: _a0
func (_m *Usecase) GetConfigurationClient(_a0 context.Context) (*configuration.ResponseConfigClient, error) {
	ret := _m.Called(_a0)

	var r0 *configuration.ResponseConfigClient
	if rf, ok := ret.Get(0).(func(context.Context) *configuration.ResponseConfigClient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationClientBySubs provides a mock function with given fields: _a0, _a1
func (_m *Usecase) GetConfigurationClientBySubs(_a0 context.Context, _a1 string) (*configuration.ResponseConfigClient, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigClient
	if rf, ok := ret.Get(0).(func(context.Context, string) *configuration.ResponseConfigClient); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationGlobal provides a mock function with given fields: _a0
func (_m *Usecase) GetConfigurationGlobal(_a0 context.Context) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationGlobalActive provides a mock function with given fields: _a0
func (_m *Usecase) GetConfigurationGlobalActive(_a0 context.Context) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationGlobalByID provides a mock function with given fields: _a0, _a1
func (_m *Usecase) GetConfigurationGlobalByID(_a0 context.Context, _a1 int32) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context, int32) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfigurationGlobalActive provides a mock function with given fields: _a0, _a1
func (_m *Usecase) SetConfigurationGlobalActive(_a0 context.Context, _a1 *configuration.ConfigurationGlobal) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationGlobal) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationGlobal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationClientBySubs provides a mock function with given fields: _a0, _a1
func (_m *Usecase) UpdateConfigurationClientBySubs(_a0 context.Context, _a1 *configuration.ConfigurationClient) (*configuration.ResponseConfigClient, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigClient
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationClient) *configuration.ResponseConfigClient); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationClient) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationGlobal provides a mock function with given fields: _a0, _a1
func (_m *Usecase) UpdateConfigurationGlobal(_a0 context.Context, _a1 *configuration.ConfigurationGlobal) (*configuration.ResponseConfigGlobal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *configuration.ResponseConfigGlobal
	if rf, ok := ret.Get(0).(func(context.Context, *configuration.ConfigurationGlobal) *configuration.ResponseConfigGlobal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configuration.ResponseConfigGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *configuration.ConfigurationGlobal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
