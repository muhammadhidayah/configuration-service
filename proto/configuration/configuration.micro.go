// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/configuration/configuration.proto

package configuration

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ConfigurationService service

type ConfigurationService interface {
	GetConfigurationClient(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error)
	GetConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error)
	AddConfigurationClient(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error)
	UpdateConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error)
	DeleteConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error)
	AddConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	UpdateConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	DeleteConfiguration(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	GetConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	GetConfigurationGlobalByID(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	GetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
	SetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error)
}

type configurationService struct {
	c    client.Client
	name string
}

func NewConfigurationService(name string, c client.Client) ConfigurationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "configuration"
	}
	return &configurationService{
		c:    c,
		name: name,
	}
}

func (c *configurationService) GetConfigurationClient(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.GetConfigurationClient", in)
	out := new(ResponseConfigClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) GetConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.GetConfigurationClientBySubs", in)
	out := new(ResponseConfigClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) AddConfigurationClient(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.AddConfigurationClient", in)
	out := new(ResponseConfigClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) UpdateConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.UpdateConfigurationClientBySubs", in)
	out := new(ResponseConfigClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) DeleteConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, opts ...client.CallOption) (*ResponseConfigClient, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.DeleteConfigurationClientBySubs", in)
	out := new(ResponseConfigClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) AddConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.AddConfigurationGlobal", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) UpdateConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.UpdateConfigurationGlobal", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) DeleteConfiguration(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.DeleteConfiguration", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) GetConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.GetConfigurationGlobal", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) GetConfigurationGlobalByID(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.GetConfigurationGlobalByID", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) GetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.GetConfigurationGlobalActive", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) SetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, opts ...client.CallOption) (*ResponseConfigGlobal, error) {
	req := c.c.NewRequest(c.name, "ConfigurationService.SetConfigurationGlobalActive", in)
	out := new(ResponseConfigGlobal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigurationService service

type ConfigurationServiceHandler interface {
	GetConfigurationClient(context.Context, *RequestConfigCient, *ResponseConfigClient) error
	GetConfigurationClientBySubs(context.Context, *RequestConfigCient, *ResponseConfigClient) error
	AddConfigurationClient(context.Context, *RequestConfigCient, *ResponseConfigClient) error
	UpdateConfigurationClientBySubs(context.Context, *RequestConfigCient, *ResponseConfigClient) error
	DeleteConfigurationClientBySubs(context.Context, *RequestConfigCient, *ResponseConfigClient) error
	AddConfigurationGlobal(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	UpdateConfigurationGlobal(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	DeleteConfiguration(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	GetConfigurationGlobal(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	GetConfigurationGlobalByID(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	GetConfigurationGlobalActive(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
	SetConfigurationGlobalActive(context.Context, *RequestConfigGlobal, *ResponseConfigGlobal) error
}

func RegisterConfigurationServiceHandler(s server.Server, hdlr ConfigurationServiceHandler, opts ...server.HandlerOption) error {
	type configurationService interface {
		GetConfigurationClient(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error
		GetConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error
		AddConfigurationClient(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error
		UpdateConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error
		DeleteConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error
		AddConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		UpdateConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		DeleteConfiguration(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		GetConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		GetConfigurationGlobalByID(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		GetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
		SetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error
	}
	type ConfigurationService struct {
		configurationService
	}
	h := &configurationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigurationService{h}, opts...))
}

type configurationServiceHandler struct {
	ConfigurationServiceHandler
}

func (h *configurationServiceHandler) GetConfigurationClient(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error {
	return h.ConfigurationServiceHandler.GetConfigurationClient(ctx, in, out)
}

func (h *configurationServiceHandler) GetConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error {
	return h.ConfigurationServiceHandler.GetConfigurationClientBySubs(ctx, in, out)
}

func (h *configurationServiceHandler) AddConfigurationClient(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error {
	return h.ConfigurationServiceHandler.AddConfigurationClient(ctx, in, out)
}

func (h *configurationServiceHandler) UpdateConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error {
	return h.ConfigurationServiceHandler.UpdateConfigurationClientBySubs(ctx, in, out)
}

func (h *configurationServiceHandler) DeleteConfigurationClientBySubs(ctx context.Context, in *RequestConfigCient, out *ResponseConfigClient) error {
	return h.ConfigurationServiceHandler.DeleteConfigurationClientBySubs(ctx, in, out)
}

func (h *configurationServiceHandler) AddConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.AddConfigurationGlobal(ctx, in, out)
}

func (h *configurationServiceHandler) UpdateConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.UpdateConfigurationGlobal(ctx, in, out)
}

func (h *configurationServiceHandler) DeleteConfiguration(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.DeleteConfiguration(ctx, in, out)
}

func (h *configurationServiceHandler) GetConfigurationGlobal(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.GetConfigurationGlobal(ctx, in, out)
}

func (h *configurationServiceHandler) GetConfigurationGlobalByID(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.GetConfigurationGlobalByID(ctx, in, out)
}

func (h *configurationServiceHandler) GetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.GetConfigurationGlobalActive(ctx, in, out)
}

func (h *configurationServiceHandler) SetConfigurationGlobalActive(ctx context.Context, in *RequestConfigGlobal, out *ResponseConfigGlobal) error {
	return h.ConfigurationServiceHandler.SetConfigurationGlobalActive(ctx, in, out)
}
